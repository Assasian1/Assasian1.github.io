<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Assasian的博客</title>
  
  <subtitle>子标题</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-11-14T04:19:53.093Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Assasian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>对grid的一点见解</title>
    <link href="http://example.com/2077/07/07/grid/"/>
    <id>http://example.com/2077/07/07/grid/</id>
    <published>2077-07-06T23:07:07.000Z</published>
    <updated>2021-11-14T04:19:53.093Z</updated>
    
    <content type="html"><![CDATA[<p> 作为一个写博客的新手，我此刻的心情是无比激动的。想了很久第一篇博客的内容，最终还 是决定分享一下最近学习的css语法中的grid（网格）布局方案。</p><p> 这里推荐一下阮一峰老师的博客，讲解的十分到位，给了我极大的启发（不过我感觉在简书，博客园等很多地方都能看到极为相似的文章，实在是搞不懂原创到底是谁）   <a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">传送门</a></p><h2 id="grid的优劣"><a href="#grid的优劣" class="headerlink" title="grid的优劣"></a>grid的优劣</h2><p> 在使用grid的过程中，我能明显感觉到grid的强大，它相较于flex最大的不同就是，flex还局限于一维布局，但grid已经拓展到了二维布局，如果暂且忽略grid的劣势的话，我认为它一定成称得上是最强大的css布局方案。</p><p> 但grid劣势也很明显，那就是兼容性差，grid只能支持高版本的浏览器，比如说chrome只支持57版本以上，ie只兼容11版本以上。而在开发过程中，兼容性往往比性能更值得考虑。</p><img src=""><h2 id="grid的简单使用"><a href="#grid的简单使用" class="headerlink" title="grid的简单使用"></a>grid的简单使用</h2><h3 id="grid-template-columns-grid-temple-rows"><a href="#grid-template-columns-grid-temple-rows" class="headerlink" title="grid-template-columns,grid-temple-rows"></a>grid-template-columns,grid-temple-rows</h3><p> 我们先创建6个盒子</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: red;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: orange;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: yellow;&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: green;&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box5&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: blue;&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: purple;&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure> <body>    <div id="box">        <div id="box1" style="background-color: red;">1</div>        <div id="box2" style="background-color: orange;">2</div>        <div id="box3" style="background-color: yellow;">3</div>        <div id="box4" style="background-color: green;">4</div>        <div id="box5" style="background-color: blue;">5</div>        <div id="box6" style="background-color: purple;">6</div>    </div></body><p>此时我们看到六个盒子默认竖直排列</p><p>在css中通过display引入grid</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;&#125;</span><br></pre></td></tr></table></figure><p>然后通过grid-template-columns和grid-template-rows给表格设置行宽和行高</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">grid-template-<span class="attribute">columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">    grid-template-rows: <span class="number">100px</span> <span class="number">100px</span>;&#125;</span><br></pre></td></tr></table></figure><p>然后呈现的效果是这样的：</p><head>    <style>        #boxa {            display: grid;            grid-template-columns: repeat(3, 100px);            grid-template-rows: repeat(2, 100px);        }    </style></head><body>    <div id="boxa">        <div id="box1" style="background-color: red;">1</div>        <div id="box2" style="background-color: orange;">2</div>        <div id="box3" style="background-color: yellow;">3</div>        <div id="box4" style="background-color: green;">4</div>        <div id="box5" style="background-color: blue;">5</div>        <div id="box6" style="background-color: purple;">6</div>    </div></body><p>为了方便，我们也可以使用repeat()：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>,<span class="number">100px</span>);</span><br><span class="line">    grid-template-rows: <span class="built_in">repeat</span>(<span class="number">2</span>,<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有必要提到grid中的fr关键字，用于表示比例关系<br>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr <span class="number">2</span>fr <span class="number">3</span>fr;</span><br><span class="line">    grid-template-rows: <span class="built_in">repeat</span>(<span class="number">2</span>,<span class="number">100px</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码表示将行宽分为六份，三者分别占一份，两份，三份</p><head>    <style type="text/css">        #boxb {            display: grid;            grid-template-columns: 1fr 2fr 3fr;            grid-template-rows: repeat(2, 100px);        }    </style></head><body>    <div id="boxb">        <div id="box1" style="background-color: red;">1</div>        <div id="box2" style="background-color: orange;">2</div>        <div id="box3" style="background-color: yellow;">3</div>        <div id="box4" style="background-color: green;">4</div>        <div id="box5" style="background-color: blue;">5</div>        <div id="box6" style="background-color: purple;">6</div>    </div></body><h3 id="gap"><a href="#gap" class="headerlink" title="gap"></a>gap</h3><p>我们可以通过gap(row-gap,columns-gap)来设置行间距和列间距，值得一提的是，我们在网上找到的文章大多还写的是grid-gap,但其实”grid-gap”早已被弃用，转而使用”gap”。<br>以下是实际效果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span> &#123;</span><br><span class="line">            <span class="attribute">display</span>: grid;</span><br><span class="line">            grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">            grid-template-rows: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">100px</span>);</span><br><span class="line">            row-gap:<span class="number">20px</span>;</span><br><span class="line">            <span class="attribute">column-gap</span>:<span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><head>    <style type="text/css">        #boxc {            display: grid;            grid-template-columns: repeat(3, 100px);            grid-template-rows: repeat(2, 100px);            row-gap:20px;            column-gap:20px;        }    </style></head><body>    <div id="boxc">        <div id="box1" style="background-color: red;">1</div>        <div id="box2" style="background-color: orange;">2</div>        <div id="box3" style="background-color: yellow;">3</div>        <div id="box4" style="background-color: green;">4</div>        <div id="box5" style="background-color: blue;">5</div>        <div id="box6" style="background-color: purple;">6</div>    </div></body><h3 id="justify-content-lign-content"><a href="#justify-content-lign-content" class="headerlink" title="justify-content,lign-content"></a>justify-content,lign-content</h3><p>还有两个很好用的属性——“justify-content”和”align-content”(也可以使用”place-content”将两者合并)，用于控制内容在容器内的位置,前者控制水平位置，后者控制垂直位置<br>如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">justify-content</span>: center|start|end|stretch|;</span><br><span class="line">    <span class="comment">/* stretch:使内容占据整个容器</span></span><br><span class="line"><span class="comment">    这里还有许多属性值就不一一赘述了</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="grid-area"><a href="#grid-area" class="headerlink" title="grid-area"></a>grid-area</h3><p>grid-area可以用于定位单元格以及合并单元格，分为grid-column和grid-row，这两者又分为<br>grid-column-start，grid-column-end和grid-row-start ，grid-row-end </p><ol><li>grid-column-start：左边框所在网格线</li><li>grid-column-end：右边框所在网格线</li><li>grid-row-start：上边框所在网格线</li><li>grid-row-end ：下边框所在网格线<br>例如：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box1</span>&#123;</span><br><span class="line">    grid-area:<span class="number">2</span>/<span class="number">2</span>/<span class="number">3</span>/<span class="number">3</span>;</span><br><span class="line">    <span class="comment">/*这里属性值的顺序是grid-row-start，grid-column-start，grid-row-end，grid-column-end</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><head> <style type="text/css">     #boxd {         display: grid;         grid-template-columns: repeat(3, 100px);         grid-template-rows: repeat(3, 100px);     }     #box1d{         grid-area:2/2/4/4;     } </style></head></li></ol><body>    <div id="boxd">        <div id="box1d" style="background-color: red;">1</div>        <div id="box2" style="background-color: orange;">2</div>        <div id="box3" style="background-color: yellow;">3</div>        <div id="box4" style="background-color: green;">4</div>        <div id="box5" style="background-color: blue;">5</div>        <div id="box6" style="background-color: purple;">6</div>    </div></body><p>于是乎，我们通过grid-area属性同时做到了单元格定位与合并</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>毋庸置疑，grid是一种极为强大的布局方案，虽然现在普及性还不是那么高，但一定会成为未来的趋势，学会如何使用它是一件很重要的事情。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 作为一个写博客的新手，我此刻的心情是无比激动的。想了很久第一篇博客的内容，最终还 是决定分享一下最近学习的css语法中的grid（网格）布局方案。&lt;/p&gt;
&lt;p&gt; 这里推荐一下阮一峰老师的博客，讲解的十分到位，给了我极大的启发（不过我感觉在简书，博客园等很多地方都能看到极</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://example.com/2021/11/05/test/"/>
    <id>http://example.com/2021/11/05/test/</id>
    <published>2021-11-05T14:36:23.000Z</published>
    <updated>2021-11-12T12:35:25.256Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/11/05/hello-world/"/>
    <id>http://example.com/2021/11/05/hello-world/</id>
    <published>2021-11-05T12:28:31.536Z</published>
    <updated>2021-11-05T14:32:49.177Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
